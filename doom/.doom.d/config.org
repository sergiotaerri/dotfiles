# -*- mode: org; -*-
#+title: Doom Emacs Configuration
#+subtitle: The Methods, Management, and Menagerie of Madness
#+author: sergiotaerri
#+startup: fold

* Rudimentary configuration
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).
#+begin_src emacs-lisp
; Make tab completion work
(map! :after vterm
    :map vterm-mode-map
    :ni "<tab>" #'vterm-send-tab)
#+end_src
** Workarounds
None, for now...
* Better defaults
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Documents/php" "~/Documents/clj" "~/Documents/cljs" "~/Documents/bp")
      +doom-dashboard-banner-file (expand-file-name "cdm.png" doom-private-dir)
      +doom-dashboard-banner-padding '(4 . 4)
      dired-dwim-target t
      evil-vsplit-window-right t
      evil-split-window-below t)

(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))

(map! :leader
      :desc "Open treemacs on current file"
      "p t" #'treemacs-find-file)

(defun goto-private-config-org-file ()
  (interactive)
  (find-file (expand-file-name "config.org" doom-private-dir)))

(map! :leader
      :desc "Open config.org private config"
      "f P" #'goto-private-config-org-file)

(map! :leader
      :mode treemacs-mode
      :desc "Toogle out of treemacs"
      "p t" #'+treemacs/toggle)
#+end_src

* Theming and Layout
#+begin_src emacs-lisp
(setq doom-theme 'doom-tomorrow-night)
(delq! t custom-theme-load-path)

(custom-set-faces!
  '(doom-modeline-buffer-modified :foreground "orange"))

(setq display-line-numbers-type nil)

(defun toggle-transparency ()
  (interactive)
  (let* ((pair (or (frame-parameter nil 'alpha) '(100 100)))
         (alpha (apply '+ pair)))
    (set-frame-parameter nil
                         'alpha
                         (if (or (null alpha) (eq alpha 200) (eq alpha 2.0))
                             '(95 90) '(100 100)))))
#+end_src
* Org
#+begin_src emacs-lisp
(after! org
  (setq org-directory "~/Documents/org/"
        org-agenda-files '("~/Documents/org/agenda.org")
        org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-roam-directory "~/Documents/org-roam"
        ;; org-ellipsis " ▼ "
        org-log-done 'time
        org-journal-dir "~/Documents/org/journal/"
        org-journal-date-format "%B %d, %Y (%A)"
        org-journal-file-format "%Y-%m-%d.org"
        org-hide-emphasis-markers t
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
        '(("google" . "http://www.google.com/search?q=")
          ("arch-wiki" . "https://wiki.archlinux.org/index.php/")
          ("ddg" . "https://duckduckgo.com/?q=")
          ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-download-image-attr-list '("#attr_org: :width 300")
        )
  ;; Workaround to make +roam2 work
  (org-id-update-id-locations (directory-files-recursively org-roam-directory ".org"))
  )


(after! org-superstar
  (setq org-superstar-headline-bullets-list '( "•" "⬝")))
#+end_src

** Yasnippet
Allows, together with it's use in a snippet, to get current language.
#+begin_src emacs-lisp
(defun +yas/org-src-lang ()
  "Try to find the current language of the src/header at point.
Return nil otherwise."
  (save-excursion
    (pcase
        (downcase
         (buffer-substring-no-properties
          (goto-char (line-beginning-position))
          (or (ignore-errors (1- (search-forward " " (line-end-position))))
              (1+ (point)))))
      ("#+property:"
       (when (re-search-forward "header-args:")
         (buffer-substring-no-properties
          (point)
          (or (and (forward-symbol 1) (point))
              (1+ (point))))))
      ("#+begin_src"
       (buffer-substring-no-properties
        (point)
        (or (and (forward-symbol 1) (point))
            (1+ (point)))))
      ("#+header:"
       (search-forward "#+begin_src")
       (+yas/org-src-lang))
      (_ nil))))

(defun +yas/org-last-src-lang ()
  (save-excursion
    (beginning-of-line)
    (when (search-backward "#+begin_src" nil t)
      (+yas/org-src-lang))))
#+end_src
** Spellcheck
#+begin_src emacs-lisp
(after! org (add-hook 'org-mode-hook 'turn-on-flyspell))
#+end_src
** Capture
Preposterous amounts of code...

#+begin_src emacs-lisp :noweb no-export
(use-package! doct
  :commands (doct))

(after! org-capture
  <<prettify-capture>>
  (setq +org-capture-uni-units (condition-case nil
                                   (split-string (f-read-text "~/.org/.uni-units"))
                                 (error nil)))

  (defun set-org-capture-templates ()
    (setq org-capture-templates
          (doct `(("Personal todo" :keys "t"
                   :icon ("checklist" :set "octicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %?"
                              "%i %a")
                   )
                  ("Personal note" :keys "n"
                   :icon ("sticky-note-o" :set "faicon" :color "green")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* %?"
                              "%i %a")
                   )
                  ("University" :keys "u"
                   :icon ("graduation-cap" :set "faicon" :color "purple")
                   :file +org-capture-todo-file
                   :headline "University"
                   :unit-prompt ,(format "%%^{Unit|%s}" (string-join +org-capture-uni-units "|"))
                   :prepend t
                   :type entry
                   :children (("Test" :keys "t"
                               :icon ("timer" :set "material" :color "red")
                               :template ("* TODO [#C] %{unit-prompt} %? :uni:tests:"
                                          "SCHEDULED: %^{Test date:}T"
                                          "%i %a"))
                              ("Assignment" :keys "a"
                               :icon ("library_books" :set "material" :color "orange")
                               :template ("* TODO [#B] %{unit-prompt} %? :uni:assignments:"
                                          "DEADLINE: %^{Due date:}T"
                                          "%i %a"))
                              ("Lecture" :keys "l"
                               :icon ("keynote" :set "fileicon" :color "orange")
                               :template ("* TODO [#C] %{unit-prompt} %? :uni:lecture:"
                                          "%i %a"))
                              ("Miscellaneous task" :keys "u"
                               :icon ("list" :set "faicon" :color "yellow")
                               :template ("* TODO [#D] %{unit-prompt} %? :uni:"
                                          "%i %a"))))
                  ("Email" :keys "e"
                   :icon ("envelope" :set "faicon" :color "blue")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Inbox"
                   :type entry
                   :template ("* TODO %^{type|reply to|contact} %\\3 %? :email:"
                              "Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}"
                              "about %^{topic}"
                              "%U %i %a"))
                  ("Interesting" :keys "i"
                   :icon ("eye" :set "faicon" :color "lcyan")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Interesting"
                   :type entry
                   :template ("* [ ] %{desc}%? :%{i-type}:"
                              "%i %a")
                   :children (("Webpage" :keys "w"
                               :icon ("globe" :set "faicon" :color "green")
                               :desc "%(org-cliplink-capture) "
                               :i-type "read:web"
                               )
                              ("Article" :keys "a"
                               :icon ("file-text" :set "octicon" :color "yellow")
                               :desc ""
                               :i-type "read:reaserch"
                               )
                              ("Information" :keys "i"
                               :icon ("info-circle" :set "faicon" :color "blue")
                               :desc ""
                               :i-type "read:info"
                               )
                              ("Idea" :keys "I"
                               :icon ("bubble_chart" :set "material" :color "silver")
                               :desc ""
                               :i-type "idea"
                               )))
                  ("Tasks" :keys "k"
                   :icon ("inbox" :set "octicon" :color "yellow")
                   :file +org-capture-todo-file
                   :prepend t
                   :headline "Tasks"
                   :type entry
                   :template ("* TODO %? %^G%{extra}"
                              "%i %a")
                   :children (("General Task" :keys "k"
                               :icon ("inbox" :set "octicon" :color "yellow")
                               :extra ""
                               )
                              ("Task with deadline" :keys "d"
                               :icon ("timer" :set "material" :color "orange" :v-adjust -0.1)
                               :extra "\nDEADLINE: %^{Deadline:}t"
                               )
                              ("Scheduled Task" :keys "s"
                               :icon ("calendar" :set "octicon" :color "orange")
                               :extra "\nSCHEDULED: %^{Start time:}t"
                               )
                              ))
                  ("Project" :keys "p"
                   :icon ("repo" :set "octicon" :color "silver")
                   :prepend t
                   :type entry
                   :headline "Inbox"
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :file ""
                   :custom (:time-or-todo "")
                   :children (("Project-local todo" :keys "t"
                               :icon ("checklist" :set "octicon" :color "green")
                               :time-or-todo "TODO"
                               :file +org-capture-project-todo-file)
                              ("Project-local note" :keys "n"
                               :icon ("sticky-note" :set "faicon" :color "yellow")
                               :time-or-todo "%U"
                               :file +org-capture-project-notes-file)
                              ("Project-local changelog" :keys "c"
                               :icon ("list" :set "faicon" :color "blue")
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-project-changelog-file))
                   )
                  ("\tCentralised project templates"
                   :keys "o"
                   :type entry
                   :prepend t
                   :template ("* %{time-or-todo} %?"
                              "%i"
                              "%a")
                   :children (("Project todo"
                               :keys "t"
                               :prepend nil
                               :time-or-todo "TODO"
                               :heading "Tasks"
                               :file +org-capture-central-project-todo-file)
                              ("Project note"
                               :keys "n"
                               :time-or-todo "%U"
                               :heading "Notes"
                               :file +org-capture-central-project-notes-file)
                              ("Project changelog"
                               :keys "c"
                               :time-or-todo "%U"
                               :heading "Unreleased"
                               :file +org-capture-central-project-changelog-file))
                   )))))

  (set-org-capture-templates)
  (unless (display-graphic-p)
    (add-hook 'server-after-make-frame-hook
              (defun org-capture-reinitialise-hook ()
                (when (display-graphic-p)
                  (set-org-capture-templates)
                  (remove-hook 'server-after-make-frame-hook
                               #'org-capture-reinitialise-hook))))))
#+end_src
The [[file:~/.emacs.d/bin/org-capture][org-capture bin]] is rather nice, but I'd be nicer with a smaller frame, and
no modeline.
#+begin_src emacs-lisp
(setf (alist-get 'height +org-capture-frame-parameters) 15)
;; (alist-get 'name +org-capture-frame-parameters) "❖ Capture") ;; ATM hardcoded in other places, so changing breaks stuff
(setq +org-capture-fn
      (lambda ()
        (interactive)
        (set-window-parameter nil 'mode-line-format 'none)
        (org-capture)))
#+end_src

** LSP support in ~src~ blocks
Now, by default, LSPs don't really function at all in ~src~ blocks.
#+begin_src emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("go" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src
* Package Configuration
** Eshell
#+begin_src emacs-lisp
(setq shell-file-name (if (eq system-type 'darwin) "/usr/bin/zsh" "/usr/bin/bash")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "htop" "ssh" "zsh")
      vterm-max-scrollback 5000)
(map! :leader
      :desc "Counsel eshell history"
      "e h" #'counsel-esh-history)
#+end_src
** Company
It's nice to have completions almost all the time, in my opinion. Key strokes
are just waiting to be saved!
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 2))
#+end_src
Now, the improvements from ~precedent~ are mostly from remembering history, so
let's improve that memory.
#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src
*** Plain Text
~Ispell~ is nice, let's have it in ~text~, ~markdown~, and ~GFM~.
#+begin_src emacs-lisp
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src
We then configure the dictionary we're using in [[*Ispell][Ispell]].
** EVIL
When I want to make a substitution, I want it to be global more often than not
--- so let's make that the default.
#+begin_src emacs-lisp
(after! evil (setq evil-ex-substitute-global t)) ; I like my s/../.. to by global by default
#+end_src
** Evil-cleverparens
#+begin_src emacs-lisp
(setq evil-cleverparens-use-additional-movement-keys nil)
#+end_src
** Hydra
#+begin_src emacs-lisp
(map! :leader
      :desc "Hydra transient state"
      "w ." #'+hydra/window-nav/body)
#+end_src
** Ivy
While in an ivy mini-buffer =C-o= shows a list of all possible actions one may take.
By default this is ~#'ivy-read-action-by-key~ however a better interface to this
is using Hydra.
#+begin_src emacs-lisp
(setq ivy-read-action-function #'ivy-hydra-read-action)
#+end_src

Increase the maximum number of items ivy will sort to 40k + a bit, this way
=SPC h f= et al. will continue to function as expected until that number.
#+begin_src emacs-lisp
(setq ivy-sort-max-size 50000)
#+end_src
** Smart Parentheses
#+begin_src emacs-lisp
(sp-local-pair
 '(org-mode)
 "<<" ">>"
 :actions '(insert))
#+end_src
** Tramp
Let's try to make tramp handle prompts better
#+begin_src emacs-lisp
(after! tramp
  (setenv "SHELL" "/bin/bash")
  (setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]#$%>\n]*#?[]#$%>] *\\(\\[[0-9;]*[a-zA-Z] *\\)*")) ;; default + 
#+end_src
** Which-key
Let's make this popup a bit faster
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.44) ;; I need the help, I really do
#+end_src
** YASnippet
Nested snippets are good, enable that.
#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src
** Writeroom
For starters, I think Doom is a bit over-zealous when zooming in
#+begin_src emacs-lisp
(setq +zen-text-scale 0.6)
#+end_src

Now, Tecosaur thinks it would also be nice to remove line numbers and org stars in
writeroom. So do I.
#+begin_src emacs-lisp
(after! writeroom-mode
  (add-hook 'writeroom-mode-hook
            (defun +zen-cleaner-org ()
              (when (and (eq major-mode 'org-mode) writeroom-mode)
                (setq-local -display-line-numbers display-line-numbers
                            display-line-numbers nil)
                (setq-local -org-indent-mode org-indent-mode)
                (org-indent-mode -1)
                (when (featurep 'org-superstar)
                  (setq-local -org-superstar-headline-bullets-list org-superstar-headline-bullets-list
                              ;; org-superstar-headline-bullets-list '("🙐" "🙑" "🙒" "🙓" "🙔" "🙕" "🙖" "🙗")
                              ;; org-superstar-headline-bullets-list '("🙘" "🙙" "🙚" "🙛")
                              org-superstar-headline-bullets-list '("")
                              -org-superstar-remove-leading-stars org-superstar-remove-leading-stars
                              org-superstar-remove-leading-stars t)
                  (org-superstar-restart)))))
  (add-hook 'writeroom-mode-disable-hook
            (defun +zen-dirty-org ()
              (when (eq major-mode 'org-mode)
                (setq-local display-line-numbers -display-line-numbers)
                ;; (when -org-indent-mode
                ;;   (org-indent-mode 1))
                (when (featurep 'org-superstar)
                  (setq-local org-superstar-headline-bullets-list -org-superstar-headline-bullets-list
                              org-superstar-remove-leading-stars -org-superstar-remove-leading-stars)
                  (org-superstar-restart))))))
#+end_src
** Org-roam
#+begin_src emacs-lisp
(map! :leader
      :prefix "n r"
      :desc "Capture to node" "c" #'org-roam-capture)
(map! :i
      "C-c i" (lambda () (interactive) (org-roam-node-insert)))

(setq my/org-roam-excluded-dirs '("archive"))

(after! org-roam
  (setq  org-roam-graph-exclude-matcher '("daily/")
         org-roam-db-node-include-function
         (lambda ()
           (let* ((file-path (buffer-file-name (buffer-base-buffer)))
                  (rel-file-path (f-relative file-path org-roam-directory))
                  (parent-directories (butlast (f-split rel-file-path))))
             (if (cl-intersection my/org-roam-excluded-dirs parent-directories :test #'string=) nil t)))
         org-roam-dailies-capture-templates
         '(
           ("d" "default" entry "** %U\n%?\n" :if-new
            (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))
           )
         org-roam-capture-templates
         '(
           ("d" "default" plain "%?" :if-new
            (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)
           ("f" "fleeting" plain "%?" :if-new
            (file+head "fleeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)
           ("l" "literature" plain "%?"
            :if-new (file+head "literature/%<%Y%m>-${slug}.org" "#+title: ${title}\n#+created: %U\n")
            :unnarrowed t)
           ("t" "topic" plain "%?"
            :if-new (file+head "topic/%<%Y%m>-${slug}.org" "#+title: ${title}\n")
            :unnarrowed t)
           ("p" "project" plain "%?"
            :if-new (file+head "project/%<%Y%m>-${slug}.org" "#+title: ${title}\n#+created: %U\n")
            :unnarrowed t)
           ("m" "recurring meeting" plain "%?"
            :if-new (file+head "meeting/%<%Y%m>-${slug}.org" "#+title: ${title}\n#+created: %U\n#+startup: overview\n")
            :unnarrowed t)
           ))
)
#+end_src
*** Org-roam-ui
#+begin_src emacs-lisp
(after! org-roam
  (map! :leader
        :desc "Show org-roam-ui graph" "n r G" #'org-roam-ui-mode))

(use-package! websocket
    :after org-roam)

(use-package! org-roam-ui
    :after org-roam ;; or :after org
;;  :hook
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src
** Org-tree-slide
#+begin_src emacs-lisp
(after! org
  (setq!
   +org-present-text-scale 1.2
   org-tree-slide-fold-subtrees-skipped nil
   )
  (map! :map org-tree-slide-mode-map
        :n [next] #'org-tree-slide-move-next-tree
        :n [prior]  #'org-tree-slide-move-previous-tree
        :n [mouse-1] #'org-tree-slide-move-next-tree
        :n [mouse-2]  #'org-tree-slide-move-previous-tree ;; Bugs out and deletes content, conflict with mouse-save-then-kill
        )
  )
#+end_src
** Plantuml
#+begin_src emacs-lisp
(setq plantuml-default-exec-mode 'jar)
(add-to-list 'auto-mode-alist '("\\.puml\\'" . plantuml-mode))
(after! plantuml-mode
  (set-popup-rule! "^\\*PLANTUML" :size 0.5 :side 'right :select nil :ttl 0))
#+end_src
* Language Configuration
** Clojure
#+begin_src emacs-lisp
(map! :map lispy-mode-map
      :i "[" #'lispy-brackets ;; not a true lisp
      :i "]" #'self-insert-command)

(map! :leader
      "p z" #'projectile-toggle-between-implementation-and-test)

;; Repl Configuration
(after! cider (set-popup-rule! "^\\*cider-repl" :side 'right :actions '(display-buffer-in-side-window) :select t :modeline t :size 0.33 :quit nil))

;; Hideous lispyville 'special context functionality'
(setq! lispy-mode-map-special nil)
#+end_src
*** Workflow-specific configuration
#+begin_src emacs-lisp
(defun cider-nrepl-reset ()
  (interactive)
  (cider-switch-to-repl-buffer)
  (goto-char (point-max))
  (insert "(com.stuartsierra.component.user-helpers/reset)")
  (cider-repl-closing-return)
  (cider-switch-to-last-clojure-buffer))

(after!
  (clojure-mode cider-mode)

  (add-to-list 'cider-test-defining-forms "defflow")

  (map! :map clojure-mode-map
        :localleader
        :desc "Reload modified project files a la 'reloaded workflow'"
        :n "r p" #'cider-nrepl-reset)

  (map! :map cider-inspector-mode-map
        :desc "Refreshes the inspector view"
        :n "r" #'cider-inspector-refresh)

  (add-hook 'before-save-hook 'cider-format-buffer t t)
  )
#+end_src
** Php
#+begin_src emacs-lisp
(add-hook! php-mode-hook #'(smartparens-mode))
;; Settings for cakephp filetypes.
(add-to-list 'auto-mode-alist '("\\.ctp\\'" . web-mode))

;;PHP quick doc lookup
(defun my-php-symbol-lookup ()
  (interactive)
  (let ((symbol (symbol-at-point)))
    (if (not symbol)
        (message "No symbol at point.")
      (browse-url (concat "http://php.net/manual-lookup.php?pattern="
                          (symbol-name symbol))))))

;;Cake quick doc search
(defun my-cake-string-lookup ()
  (interactive)
  (browse-url (concat "https://book.cakephp.org/1.3/en/search.html?check_keywords=yes&area=default&q="
                      (read-string "Search in cake 1.3 doc:"))))

(map!
 :map php-mode-map
 :desc "Go to php doc webpage"
 :n
 "g h" #'my-php-symbol-lookup
 :localleader
 (:prefix ("h" . "help"))
 :desc "Search in cake 1.3 doc"
 "c" #'my-cake-string-lookup)
#+end_src
** Yaml
The face for constants and keywords are white and white on these themes, sadly.
#+begin_src emacs-lisp
(add-hook! 'yaml-mode-hook
  (custom-set-faces! '('doom-vibrant 'doom-one)
    `(font-lock-variable-name-face :foreground ,(doom-color 'blue))))
#+end_src
** Lsp-ui
#+begin_src emacs-lisp
(after! lsp-ui
  (setq lsp-ui-doc-enable t
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-peek-enable t
        lsp-ui-sideline-delay 0.4
        lsp-ui-doc-max-height 40
        lsp-ui-doc-max-width 80
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-delay 2))

(map! :leader
      "j i" #'lsp-ui-imenu)
#+end_src
* Indentation
#+begin_src emacs-lisp
(setq web-mode-code-indent-offset 2
      web-mode-css-indent-offset 2
      js-indent-level 2
      typescript-indent-level 2
      css-indent-offset 2
      json-reformat:indent-width 2
      +format-on-save-enabled-modes
      '(not emacs-lisp-mode             ; elisp's mechanisms are good enough
            sql-mode                    ; sqlformat is currently broken
            tex-mode                    ; latexindent is broken
            latex-mode
            php-mode))
#+end_src
    
* Font
 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:
 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
 =(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light) doom-variable-pitch-font (font-spec :family "sans" :size 13))=

#+begin_src emacs-lisp
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))

(setq doom-font (font-spec :family "Inconsolata" :size 16)
      doom-big-font (font-spec :family "Inconsolata" :weight 'semi-bold :size 36)
      doom-variable-pitch-font (font-spec :family "IBM Plex Mono" :weight 'semi-light :size 16)
      doom-serif-font (font-spec :family "IBM Plex Serif" :weight 'light)
      ;; mixed-pitch-set-height t
      )
#+end_src
    
* Eval
#+begin_src emacs-lisp
(set-eval-handler! 'php-mode
  '((:command     . "php")
    (:exec        . "%c -r %s")
    (:description . "Run php script")))
#+end_src

* Keybinds
#+begin_src emacs-lisp
;; Solve conflict doom-leader with evil-snipe
(setq evil-snipe-override-evil-repeat-keys nil)
(setq doom-localleader-key ",")


(map! :leader
      :desc "Toggle transparency"
      "t T" #'toggle-transparency)
(map! :leader
      :desc "Magit Status"
      "g s" #'magit-status)
(map! :ne "M-/" #'comment-or-uncomment-region)

(map! :g
      :desc "Switch window layout"
      "C-<up>" #'ivy-switch-view
      :g
      :desc "Push window layout"
      "C-<down>" #'ivy-push-view
      :g
      :desc "Pop window layout"
      "C-S-<down>" #'ivy-pop-view)

;; Register keys, useful?
(map! :leader
      :desc "Copy to register"
      "r c" #'copy-to-register
      :leader
      :desc "Frameset to register"
      "r f" #'frameset-to-register
      :leader
      :desc "Insert contents of register"
      "r i" #'insert-register
      :leader
      :desc "Jump to register"
      "r j" #'jump-to-register
      :leader
      :desc "List registers"
      "r l" #'list-registers
      :leader
      :desc "Number to register"
      "r n" #'number-to-register
      :leader
      :desc "Interactively choose a register"
      "r r" #'counsel-register
      :leader
      :desc "View a register"
      "r v" #'view-register
      :leader
      :desc "Window configuration to register"
      "r w" #'window-configuration-to-register
      :leader
      :desc "Increment register"
      "r +" #'increment-register
      :leader
      :desc "Point to register"
      "r SPC" #'point-to-register)


(map! :desc "List of yanks"
      :n
      "M-p" #'counsel-yank-pop
      :leader)

(map!
 :desc "Expand region transient state"
 :v
 "." 'er/expand-region)
#+end_src
